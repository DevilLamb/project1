const express = require("express");
const app = express();
//여기는 서버 오픈방법

const bodyParser = require("body-parser");
app.use(bodyParser.urlencoded({ extended: true }));
//바디파서는 인풋에서 받은 데이터 꺼내는 방법.
//이게 문법이니까 그냥 외우면 됨.

app.listen(8831, function () {
  console.log("listening on 8831");
});

//여기까지 서버 오픈하는 문법. 익스프레스 라이브러리로 서버 만드는 것이다.
//listen 함수 안의 파라미터 두 개는 8831이라는 이름으로, 서버 열어주세요 라는 뜻.
//컴퓨터 안의 무수한 포트 중 8831로 들어오는 애들은 이 작업 해주세요 라는 뜻.
//앞자리 채워주자 831로 했더니 오류남..
//서버를 만들면 인터넷 주소창에 localhost:8831 쳐보자. 뜬다!

//이제 요청을 처리하는 기계 제작하기
//get요청은 url로 이동시키는 것.

//누군가가 /pet으로방문을 하면
//pet관련된 안내문을 띄워주자

app.get("/pet", function (요청, 응답) {
  응답.send("반려동물 용품 쇼핑 사이트입니다");
});

//localhost8831/pet 하면 저 안의 내용이 나온다!
//이게 서버 get요청 처리하는 방법임!

//미니숙제 뷰티사이트 만들기

app.get("/beauty", function (요청, 응답) {
  응답.send("뷰티관련 쇼핑 사이트입니다.");
});

//.get()여러개로 경로를 많이많이 생성가능!
//작동이 안되면 98%오타.
//서버짜고 저장 꼭하기!
//그리고 재실행도 해야됨

//서버에서 html파일도 전송해보고 nodemon으로 자동화 해보기

//서버 만들고 재실행 귀찮으니까 자동화 시켜볼까?
//npm 라이브러리에서 nodemon 인스톨하면 이제 자기가 알아서 서버 갱신해줌!
//만약 안되면 파워쉘 관리자권한으로 열어서 설치하고, execution 설정 풀어주면 알아서 잘 업데이트해줌!
//잘 설치되면 서버에 한글자 추가할때마다 알아서 업데이트해줌.

//이제 업그레이드. html 보내볼까?
//슬래시 하나만 치면 홈페이지.

app.get("/", function (요청, 응답) {
  응답.sendFile(__dirname + "/index.html");
});

//.sendFile(보낼 파일 경로. 언더바 두개 +  __dirname = 디렉션 이름 + '경로')

//이제 부트스트랩으로 빠른 ui개발하기

app.get("/write", function (요청, 응답) {
  응답.sendFile(__dirname + "/Write.html");
});

//get 파라미터 중 하나는 꼭 콜백함수임.
//프로미스마냥 슨차적으로 실행하고 싶을 때 쓴다.

//람다함수도 사용가능하다~

//버튼을 누르면 폼에 입력한 제목과 날짜를 서버로 전달해보자

//어떤 사람이 /add 경로로 POST요청을 하면
//뭔가 해주세요

app.post("/add", function (요청, 응답) {
  console.log(요청.body);
  //{ title: 'ㅁㅁㄴㅇ', date: 'ㅁㄴㅇㅁ' } 이렇게 들어옴!
  //요청.body.title <- 이렇게 하면 타이틀에 적은 값만 빠져나온다. 객체아님.
  응답.send("전송완료");
});

//근데 인풋에 적은 정보는 어디?
//'요청'에 있음!!
//꺼내쓰려면 다른 라이브러리 필요!
//body-parser 라이브러리가 데이터 꺼내기 쉽게 만들어줌.
//그리고 인풋에 들어있는 정보 구분해서 가져오려면
//인풋태그에 name속성 꼭 주기.

//받아온 정보는 어떻게 저장해?
//DB에 저장해주세요<-코드로 적기.

//이걸 알려면 rest API 에 대해 알아야 해!
//REST API가 뭐야? 뭐길래 다들 REST 하게 만들라는거야?
//API : apllication programming interface
//통신규약 같은것, 웹 개발 환경에서 API란
//웹서버와 고객간의 소통방법.
//어떻게 해야 서버와 통신할 수 있을지에 대한 방법.

//위에서 app.post("/add", ~ 이런게 다 API! 우리 서버와의 통신방법임.

//그러니까 어떤 식으로 만들어야 좋을까 하는게 REST API임.

//Roy Fielding 이란 사람이 REST원칙에 대한 졸업논문 작성한 것이 유명해져서 교본이 됨.

//REST 원칙 6개 :
//1. uniform interface (가장 중요)
//-하나의 자료는 하나의 URL로, URL하나를 알면 둘을 알 수 있어야 함, 요청과 응답은 정보가 충분히 들어있어야 함.
//2. Client-Server 역할 구분을 정확히 하라.
//-브라우저에 서버 역할을 시키지 마라. 브라우저는 요청만, 서버는 응답만.
//3. Stateless
//-요청 1과 요청2는 의존성이 없어야 함. 요청 1과 2는 각각 독립적이어야 함.
//4. Cacheable
//- 서버에서 보내주는 정보들은 캐싱이 가능해야 함, 캐싱을 위한 버전 같은 것도 관리 잘 해야 함. (크롬이 잘 해줌.)
//5.Layered System
//계층화 된 시스템 아키텍쳐를 사용하여 각 구성들 간의 계층을 마음대로 상호작용 할 수 없도록 제한.
//6.Code on Demand
//서버가 네트워크를 통해 클라이언트에 전달한 JS등과 같은 프로그램들은 그 자체로 실행이 될 수 있어야 함.

//1번에 따라 좋은 API예시는

//instargram.com/explore/tags/kpop => 인스타그램에서 태그 케이팝으로 검색하면 나오는 결과.
//www.example.com/products/66437 => 66437 번째 상품 보여주는 페이지
//이런식으로 url만 보고 알 수 있을 정도로 만들기.

//좋은 이름짓기 원칙 :
//- URL을 명사로 작성, 하위문서로 나타낼 때는 슬래시(/) 쓰기. 파일확장자(.js) 쓰지 말기, 띄어쓰기는 - 이용, 자료 하나당 하나의 URL.
